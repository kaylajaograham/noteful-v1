{"ast":null,"code":"import _classCallCheck from \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/kaylagraham/Desktop/Thinkful/noteful-v1/src/Add Note/AddNote.js\";\nimport React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport NoteContext from '../NoteContext';\nimport './AddNote.css';\n\nvar AddNote =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddNote, _Component);\n\n  function AddNote() {\n    var _this;\n\n    _classCallCheck(this, AddNote);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddNote).call(this));\n\n    _this.isNameValid = function (event) {\n      event.preventDefault();\n\n      if (!_this.state.name) {\n        _this.setState({\n          validationMessage: 'Note name can not be blank.',\n          nameValid: false\n        });\n      } else if (!_this.state.id) {\n        _this.setState({\n          validationMessage: 'You must choose a valid folder.',\n          idValid: false\n        });\n      } else {\n        _this.setState({\n          validationMessage: '',\n          nameValid: true\n        }, function () {\n          _this.handleAddNote();\n        });\n      }\n    };\n\n    _this.handleAddNote = function () {\n      var options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          // id: cuid(),\n          name: _this.state.name,\n          modified: new Date(),\n          folderId: _this.state.id,\n          content: _this.state.content\n        })\n      };\n      fetch('http://localhost:9090/notes', options).then(function (res) {\n        if (!res.ok) {\n          throw new Error('Something went wrong');\n        }\n\n        return res;\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.context.handleAddNote(data);\n      }).catch(function (err) {\n        _this.setState({\n          error: err.message\n        });\n      });\n    };\n\n    _this.nameChange = function (letter) {\n      _this.setState({\n        name: letter\n      });\n    };\n\n    _this.contentChange = function (letter) {\n      _this.setState({\n        content: letter\n      });\n    };\n\n    _this.idChange = function (letter) {\n      _this.setState({\n        id: letter\n      });\n    };\n\n    _this.state = {\n      error: null,\n      name: '',\n      content: '',\n      id: '',\n      nameValid: false,\n      idValid: false,\n      validationMessage: ''\n    };\n    return _this;\n  }\n\n  _createClass(AddNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"section\", {\n        className: \"AddNote\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Create a note\"), React.createElement(NotefulForm, {\n        onSubmit: function onSubmit(event) {\n          _this2.isNameValid(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-name-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"note-name-input\",\n        name: \"note\",\n        onChange: function onChange(event) {\n          _this2.nameChange(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), !this.state.nameValid && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.validationMessage)), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-content-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Content\"), React.createElement(\"textarea\", {\n        id: \"note-content-input\",\n        name: \"content\",\n        onChange: function onChange(event) {\n          _this2.contentChange(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"field\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"note-folder-select\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Folder\"), React.createElement(\"select\", {\n        id: \"note-folder-select\",\n        name: \"folder\",\n        onChange: function onChange(event) {\n          _this2.idChange(event.target.value);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"...\"), this.context.folders.map(function (folder) {\n        return React.createElement(\"option\", {\n          key: folder.name,\n          name: \"folder\",\n          value: folder.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, folder.name);\n      })), !this.state.nameValid && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, this.state.validationMessage))), React.createElement(\"div\", {\n        className: \"buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Add note\"))), this.state.error && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.state.error)));\n    }\n  }]);\n\n  return AddNote;\n}(Component);\n\nAddNote.contextType = NoteContext;\nAddNote.defaultProps = {\n  folders: []\n};\nexport { AddNote as default };","map":{"version":3,"sources":["/Users/kaylagraham/Desktop/Thinkful/noteful-v1/src/Add Note/AddNote.js"],"names":["React","Component","NotefulForm","NoteContext","AddNote","isNameValid","event","preventDefault","state","name","setState","validationMessage","nameValid","id","idValid","handleAddNote","options","method","headers","body","JSON","stringify","modified","Date","folderId","content","fetch","then","res","ok","Error","json","data","context","catch","err","error","message","nameChange","letter","contentChange","idChange","target","value","folders","map","folder","contextType","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport NotefulForm from '../NotefulForm/NotefulForm';\nimport NoteContext from '../NoteContext';\nimport './AddNote.css';\n\nexport default class AddNote extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error: null,\n      name: '',\n      content: '',\n      id: '',\n      nameValid: false,\n      idValid: false,\n      validationMessage: ''\n    };\n  }\n  static contextType = NoteContext;\n  static defaultProps = {\n    folders: []\n  };\n\n  isNameValid = event => {\n    event.preventDefault();\n    if (!this.state.name) {\n      this.setState({\n        validationMessage: 'Note name can not be blank.',\n        nameValid: false\n      });\n    } else if (!this.state.id) {\n      this.setState({\n        validationMessage: 'You must choose a valid folder.',\n        idValid: false\n      });\n    } else {\n      this.setState(\n        {\n          validationMessage: '',\n          nameValid: true\n        },\n        () => {\n          this.handleAddNote();\n        }\n      );\n    }\n  };\n\n  handleAddNote = () => {\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        // id: cuid(),\n        name: this.state.name,\n        modified: new Date(),\n        folderId: this.state.id,\n        content: this.state.content\n      })\n    };\n\n    fetch('http://localhost:9090/notes', options)\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong');\n        }\n        return res;\n      })\n      .then(res => res.json())\n      .then(data => {\n        this.context.handleAddNote(data);\n      })\n      .catch(err => {\n        this.setState({ error: err.message });\n      });\n  };\n\n  nameChange = letter => {\n    this.setState({ name: letter });\n  };\n\n  contentChange = letter => {\n    this.setState({ content: letter });\n  };\n\n  idChange = letter => {\n    this.setState({ id: letter });\n  };\n\n  render() {\n    return (\n      <section className='AddNote'>\n        <h2>Create a note</h2>\n        <NotefulForm\n          onSubmit={event => {\n            this.isNameValid(event);\n          }}\n        >\n          <div className='field'>\n            <label htmlFor='note-name-input'>Name</label>\n            <input\n              type='text'\n              id='note-name-input'\n              name='note'\n              onChange={event => {\n                this.nameChange(event.target.value);\n              }}\n            />\n          </div>\n          {!this.state.nameValid && (\n            <div>\n              <p>{this.state.validationMessage}</p>\n            </div>\n          )}\n          <div className='field'>\n            <label htmlFor='note-content-input'>Content</label>\n            <textarea\n              id='note-content-input'\n              name='content'\n              onChange={event => {\n                this.contentChange(event.target.value);\n              }}\n            />\n          </div>\n          <div className='field'>\n            <label htmlFor='note-folder-select'>Folder</label>\n            <select\n              id='note-folder-select'\n              name='folder'\n              onChange={event => {\n                this.idChange(event.target.value);\n              }}\n            >\n              <option value={null}>...</option>\n              {this.context.folders.map(folder => (\n                <option key={folder.name} name='folder' value={folder.id}>\n                  {folder.name}\n                </option>\n              ))}\n            </select>\n            {!this.state.nameValid && (\n              <div>\n                <p>{this.state.validationMessage}</p>\n              </div>\n            )}\n          </div>\n          <div className='buttons'>\n            <button type='submit'>Add note</button>\n          </div>\n        </NotefulForm>\n        {this.state.error && (\n          <div>\n            <p>{this.state.error}</p>\n          </div>\n        )}\n      </section>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}